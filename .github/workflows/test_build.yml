name: test build
on:
  workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    if: >-
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'Build System'))
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        # - [ubuntu-20.04, manylinux_x86_64]
        # - [ubuntu-20.04, manylinux_i686]
        # - [ubuntu-20.04, musllinux_x86_64]
        - [macos-11, macosx_*]
        # - [windows-2019, win_amd64]
        # - [windows-2019, win32]
        python: ["cp38"] # Note: Wheels not needed for PyPy
        # python: ["cp37", "cp38", "cp39", "cp310","cp311"] # Note: Wheels not needed for PyPy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        if: contains(matrix.buildplat[1], '_aarch64')
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.4
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BEFORE_BUILD: 'pip install --upgrade pip; pip install -r requirements.txt; python setup.py build_ext --inplace'
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'
          # TODO: Cython tests take a long time to complete
          # consider running a subset in the future?
          #CIBW_TEST_COMMAND: python {project}/runtests.py -vv --no-refnanny

      - name: check build
        run: |
          ls wheelhouse

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.python }}-${{ startsWith(matrix.buildplat[1], 'macosx') && 'macosx' || matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout quicksectx
        uses: actions/checkout@v3
      # Used to push the built wheels
      - uses: actions/setup-python@v4
        with:
          # Build sdist on lowest supported Python
          python-version: '3.8.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build sdist
        run: |
          python setup.py sdist
      - uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          pip install twine

      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: check downloaded
        run: |
          mv ./dist/**/* ./dist/
          rm -rf dist/cp*
          rm -rf dist/sdist
          ls -R

      - name: Build and publish
        run: |
          twine upload --skip-existing --verbose dist/*
        env:
#          TWINE_REPOSITORY: testpypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}


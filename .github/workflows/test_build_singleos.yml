name: test single os
on:
  workflow_dispatch:
    inputs:
      chosen-os:
        required: true
        type: choice
        options:
        - ubuntu
        - macos
        - windows


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_on_ubuntu:
    if: ${{ inputs.chosen-os }} == 'ubuntu'
    name: Build ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: "${{ inputs.chosen-os }}-latest"    
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          - [ubuntu-latest, manylinux_x86_64]
        python: ["cp38"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Cache cibuild
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-cibuilds
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: /var/lib/docker/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.0
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BEFORE_BUILD: "pip install -r requirements.txt"
          # CIBW_BEFORE_BUILD: "python setup.py build_ext --inplace"
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests

      - name: check build
        run: |
          python --version
          ls -l wheelhouse

  build_on_windows:
    if: ${{ inputs.chosen-os }} == 'windows'
    name: Build ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: "${{ inputs.chosen-os }}-latest"    
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          - [windows-latest, win_amd64]
        python: ["cp38"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Cache cibuild
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-cibuilds
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: /var/lib/docker/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.0
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BEFORE_BUILD: "pip install -r requirements.txt"
          # CIBW_BEFORE_BUILD: "python setup.py build_ext --inplace"
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests

      - name: check build
        run: |
          python --version
          ls -l wheelhouse
  
  build_on_macos:
    if: ${{ inputs.chosen-os }} == 'macos'
    name: Build ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: "${{ inputs.chosen-os }}-latest"    
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          - [macos-latest, macosx_x86_64]
        python: ["cp38"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Cache cibuild
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-cibuilds
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: /var/lib/docker/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.0
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BEFORE_BUILD: "pip install -r requirements.txt"
          # CIBW_BEFORE_BUILD: "python setup.py build_ext --inplace"
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests

      - name: check build
        run: |
          python --version
          ls -l wheelhouse




